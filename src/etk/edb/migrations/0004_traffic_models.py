# Generated by Django 4.2.2 on 2024-04-23 06:34

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.db import migrations, models

import etk.edb.models.fleets
import etk.edb.models.road_classes
import etk.edb.models.road_models


class Migration(migrations.Migration):
    dependencies = [
        ("edb", "0003_model_updates"),
    ]

    operations = [
        migrations.CreateModel(
            name="ColdstartTimevar",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "typeday",
                    models.CharField(
                        defaultnoqa
                        max_length=12240,
                    ),
                ),
                (
                    "month",
                    models.CharField(
                        default="[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]",  # noqa
                        max_length=840,
                    ),
                ),
                ("typeday_sum", models.FloatField(editable=False)),
                ("_normalization_constant", models.FloatField(editable=False)),
            ],
            options={
                "abstract": False,
                "default_related_name": "coldstart_timevars",
            },
        ),
        migrations.CreateModel(
            name="CongestionProfile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        verbose_name="name of congestion profile",
                    ),
                ),
                (
                    "traffic_condition",
                    models.CharField(
                        default=etk.edb.models.road_models.default_congestion_profile_data,  # noqa
                        max_length=50,
                    ),
                ),
            ],
            options={
                "default_related_name": "congestion_profiles",
            },
        ),
        migrations.CreateModel(
            name="Fleet",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("default_heavy_vehicle_share", models.FloatField()),
                ("tags", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "default_related_name": "fleets",
            },
            managers=[
                ("objects", etk.edb.models.fleets.FleetManager()),
            ],
        ),
        migrations.CreateModel(
            name="FleetMember",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("fraction", models.FloatField(default=0.0)),
                ("coldstart_fraction", models.FloatField(default=0.0)),
                (
                    "coldstart_timevar",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="edb.coldstarttimevar",
                    ),
                ),
                (
                    "fleet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vehicles",
                        to="edb.fleet",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FlowTimevar",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "typeday",
                    models.CharField(
                        defaultnoqa
                        max_length=12240,
                    ),
                ),
                (
                    "month",
                    models.CharField(
                        default="[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]",  # noqa
                        max_length=840,
                    ),
                ),
                ("typeday_sum", models.FloatField(editable=False)),
                ("_normalization_constant", models.FloatField(editable=False)),
            ],
            options={
                "abstract": False,
                "default_related_name": "flow_timevars",
            },
        ),
        migrations.CreateModel(
            name="RoadAttribute",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=64, unique=True)),
                ("slug", models.SlugField(max_length=64, unique=True)),
                ("order", models.PositiveSmallIntegerField(unique=True)),
            ],
            options={
                "ordering": ["order"],
                "default_related_name": "road_attributes",
            },
        ),
        migrations.CreateModel(
            name="RoadAttributeValue",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.CharField(max_length=64)),
                (
                    "attribute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="values",
                        to="edb.roadattribute",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RoadClass",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "attribute_values",
                    models.ManyToManyField(to="edb.roadattributevalue"),
                ),
            ],
            options={
                "default_related_name": "road_classes",
            },
            managers=[
                ("objects", etk.edb.models.road_classes.RoadClassManager()),
            ],
        ),
        migrations.CreateModel(
            name="TrafficSituation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ts_id",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="traffic situation id"
                    ),
                ),
            ],
            options={
                "default_related_name": "traffic_situations",
            },
        ),
        migrations.CreateModel(
            name="Vehicle",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("info", models.CharField(blank=True, max_length=100, null=True)),
                ("isheavy", models.BooleanField(default=False)),
                (
                    "max_speed",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (20, "20"),
                            (30, "30"),
                            (40, "40"),
                            (50, "50"),
                            (60, "60"),
                            (70, "70"),
                            (80, "80"),
                            (90, "90"),
                            (100, "100"),
                            (110, "110"),
                            (120, "120"),
                            (130, "130"),
                            (140, "140"),
                        ],
                        default=130,
                        null=True,
                    ),
                ),
            ],
            options={
                "default_related_name": "vehicles",
            },
        ),
        migrations.CreateModel(
            name="VehicleFuel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "default_related_name": "vehicle_fuels",
            },
        ),
        migrations.AlterField(
            model_name="timevar",
            name="typeday",
            field=models.CharField(
                defaultnoqa
                max_length=12240,
            ),
        ),
        migrations.CreateModel(
            name="VehicleFuelComb",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "activitycode1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode",
                    ),
                ),
                (
                    "activitycode2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode",
                    ),
                ),
                (
                    "activitycode3",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode",
                    ),
                ),
                (
                    "fuel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="edb.vehiclefuel",
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="edb.vehicle"
                    ),
                ),
            ],
            options={
                "default_related_name": "vehiclefuelcombs",
            },
        ),
        migrations.CreateModel(
            name="VehicleEF",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("freeflow", models.FloatField(default=0)),
                ("heavy", models.FloatField(default=0)),
                ("saturated", models.FloatField(default=0)),
                ("stopngo", models.FloatField(default=0)),
                ("coldstart", models.FloatField(default=0)),
                (
                    "fuel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.vehiclefuel",
                    ),
                ),
                (
                    "substance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.substance",
                    ),
                ),
                (
                    "traffic_situation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="edb.trafficsituation",
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="edb.vehicle"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Vehicle emission factors",
                "default_related_name": "emissionfactors",
            },
        ),
        migrations.CreateModel(
            name="RoadSource",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="time of creation"
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="time of last update"
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        null=True,
                        verbose_name="user-defined key-value pairs",
                    ),
                ),
                (
                    "aadt",
                    models.IntegerField(
                        default=0, verbose_name="Annual average day traffic"
                    ),
                ),
                (
                    "nolanes",
                    models.IntegerField(default=2, verbose_name="Number of lanes"),
                ),
                (
                    "speed",
                    models.IntegerField(
                        choices=[
                            (20, "20"),
                            (30, "30"),
                            (40, "40"),
                            (50, "50"),
                            (60, "60"),
                            (70, "70"),
                            (80, "80"),
                            (90, "90"),
                            (100, "100"),
                            (110, "110"),
                            (120, "120"),
                            (130, "130"),
                            (140, "140"),
                        ],
                        default=70,
                        verbose_name="Road sign speed [km/h]",
                    ),
                ),
                (
                    "width",
                    models.FloatField(default=20.0, verbose_name="Road width [meters]"),
                ),
                ("median_strip_width", models.FloatField(default=0)),
                (
                    "slope",
                    models.IntegerField(
                        choices=[
                            (-10, "-10"),
                            (-9, "-9"),
                            (-8, "-8"),
                            (-7, "-7"),
                            (-6, "-6"),
                            (-5, "-5"),
                            (-4, "-4"),
                            (-3, "-3"),
                            (-2, "-2"),
                            (-1, "-1"),
                            (0, "0"),
                            (1, "1"),
                            (2, "2"),
                            (3, "3"),
                            (4, "4"),
                            (5, "5"),
                            (6, "6"),
                            (7, "7"),
                            (8, "8"),
                            (9, "9"),
                        ],
                        default=0,
                        verbose_name="Slope [°]",
                    ),
                ),
                ("heavy_vehicle_share", models.FloatField(blank=True, null=True)),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.LineStringField(
                        db_index=True,
                        geography=True,
                        srid=4326,
                        verbose_name="the road coordinates",
                    ),
                ),
                (
                    "congestion_profile",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="edb.congestionprofile",
                    ),
                ),
                (
                    "fleet",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="edb.fleet",
                    ),
                ),
                (
                    "roadclass",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.roadclass",
                    ),
                ),
            ],
            options={
                "default_related_name": "roadsources",
            },
        ),
        migrations.AddField(
            model_name="roadclass",
            name="traffic_situation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="edb.trafficsituation"
            ),
        ),
        migrations.CreateModel(
            name="FleetMemberFuel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("fraction", models.FloatField(default=0.0)),
                (
                    "fleet_member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fuels",
                        to="edb.fleetmember",
                    ),
                ),
                (
                    "fuel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.vehiclefuel",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="fleetmember",
            name="timevar",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="edb.flowtimevar",
            ),
        ),
        migrations.AddField(
            model_name="fleetmember",
            name="vehicle",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="edb.vehicle",
            ),
        ),
        migrations.AddConstraint(
            model_name="fleet",
            constraint=models.CheckConstraint(
                check=models.Q(("default_heavy_vehicle_share__range", (0, 1))),
                name="fleet_default_heavy_vehicle_share_between_0_and_1",
            ),
        ),
        migrations.AddIndex(
            model_name="vehiclefuelcomb",
            index=models.Index(
                fields=["vehicle", "fuel"], name="edb_vehicle_vehicle_603f1f_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="vehiclefuelcomb",
            constraint=models.UniqueConstraint(
                fields=("vehicle", "fuel"),
                name="vehiclefuelcomb_vehicle_fuel_unique_together",
            ),
        ),
        migrations.AddConstraint(
            model_name="vehicleef",
            constraint=models.UniqueConstraint(
                fields=("vehicle", "fuel", "substance", "traffic_situation"),
                name="vehicleef_unique_in_efset",
            ),
        ),
        migrations.AddConstraint(
            model_name="roadsource",
            constraint=models.CheckConstraint(
                check=models.Q(("aadt__gte", 0)), name="road_source_aadt_gte_0"
            ),
        ),
        migrations.AddConstraint(
            model_name="roadsource",
            constraint=models.CheckConstraint(
                check=models.Q(("nolanes__gt", 0)), name="road_source_nolanes_gt_0"
            ),
        ),
        migrations.AddConstraint(
            model_name="roadsource",
            constraint=models.CheckConstraint(
                check=models.Q(("width__gt", 0)), name="road_source_width_gt_0"
            ),
        ),
        migrations.AddConstraint(
            model_name="roadsource",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("median_strip_width__gte", 0),
                    ("median_strip_width__lt", models.F("width")),
                ),
                name="road_source_median_strip_width_between_0_and_width",
            ),
        ),
        migrations.AddConstraint(
            model_name="roadsource",
            constraint=models.CheckConstraint(
                check=models.Q(("heavy_vehicle_share__range", (0, 1))),
                name="road_source_heavy_vehicle_share_between_0_and_1",
            ),
        ),
        migrations.AddConstraint(
            model_name="roadattributevalue",
            constraint=models.UniqueConstraint(
                fields=("value", "attribute"), name="unique_road_attribute_value"
            ),
        ),
        migrations.AddConstraint(
            model_name="fleetmemberfuel",
            constraint=models.UniqueConstraint(
                fields=("fleet_member", "fuel"),
                name="fleetmemberfuel_unique_fuel_in_fleetmember",
            ),
        ),
        migrations.AddConstraint(
            model_name="fleetmember",
            constraint=models.UniqueConstraint(
                fields=("fleet", "vehicle"), name="fleetmember_unique_vehicle_in_fleet"
            ),
        ),
    ]
