# Generated by Django 3.2.18 on 2023-04-17 12:16

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.db import migrations, models

import etk.edb.models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Activity",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="name of activity"
                    ),
                ),
            ],
            options={
                "db_table": "activity",
            },
        ),
        migrations.CreateModel(
            name="ActivityCode1",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        max_length=100, verbose_name="activity code label"
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        max_length=20, unique=True, verbose_name="activity code"
                    ),
                ),
            ],
            options={
                "db_table": "activitycode1",
            },
        ),
        migrations.CreateModel(
            name="ActivityCode2",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        max_length=100, verbose_name="activity code label"
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        max_length=20, unique=True, verbose_name="activity code"
                    ),
                ),
            ],
            options={
                "db_table": "activitycode2",
            },
        ),
        migrations.CreateModel(
            name="ActivityCode3",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        max_length=100, verbose_name="activity code label"
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        max_length=20, unique=True, verbose_name="activity code"
                    ),
                ),
            ],
            options={
                "db_table": "activitycode3",
            },
        ),
        migrations.CreateModel(
            name="AreaSource",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "name",
                    models.CharField(
                        db_index=True, max_length=100, verbose_name="name"
                    ),
                ),
                (
                    "info",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=100,
                        null=True,
                        verbose_name="general information",
                    ),
                ),
                (
                    "infogiver",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="information source",
                    ),
                ),
                (
                    "created",
                    models.DateField(
                        auto_now_add=True, verbose_name="date of creation"
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date of last update"
                    ),
                ),
                (
                    "tags",
                    models.CharField(
                        max_length=100, verbose_name="dictionary of key-value pairs"
                    ),
                ),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.PolygonField(
                        db_index=True,
                        geography=True,
                        srid=4326,
                        verbose_name="the extent of the area source",
                    ),
                ),
            ],
            options={
                "db_table": "areasource",
                "default_related_name": "areasources",
            },
        ),
        migrations.CreateModel(
            name="CongestionProfile",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        verbose_name="name of congestion profile",
                    ),
                ),
                (
                    "traffic_condition",
                    models.CharField(
                        default=etk.edb.models.default_congestion_profile_traffic_condition,  # noqa
                        max_length=800,
                        verbose_name="A table of hourly congestion levels in a typical week.",  # noqa
                    ),
                ),
            ],
            options={
                "db_table": "congestion_profile",
            },
        ),
        migrations.CreateModel(
            name="Fleet",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "is_template",
                    models.BooleanField(
                        default=False,
                        verbose_name="Use fleet composition as a template",
                    ),
                ),
            ],
            options={
                "db_table": "fleet",
            },
        ),
        migrations.CreateModel(
            name="FleetMember",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                ("fraction", models.FloatField(default=0.0)),
                ("coldstart_fraction", models.FloatField(default=0.0)),
            ],
            options={
                "db_table": "fleet_member",
            },
        ),
        migrations.CreateModel(
            name="Fuel",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                ("name", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "fuel",
            },
        ),
        migrations.CreateModel(
            name="GridSource",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "name",
                    models.CharField(
                        db_index=True, max_length=100, verbose_name="name"
                    ),
                ),
                (
                    "info",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=100,
                        null=True,
                        verbose_name="general information",
                    ),
                ),
                (
                    "infogiver",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="information source",
                    ),
                ),
                (
                    "created",
                    models.DateField(
                        auto_now_add=True, verbose_name="date of creation"
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date of last update"
                    ),
                ),
                (
                    "tags",
                    models.CharField(
                        max_length=100, verbose_name="dictionary of key-value pairs"
                    ),
                ),
                (
                    "raster_file",
                    models.CharField(
                        max_length=100, verbose_name="Path of raster file"
                    ),
                ),
                (
                    "height",
                    models.FloatField(default=2.0, verbose_name="height above ground"),
                ),
            ],
            options={
                "db_table": "gridsource",
            },
        ),
        migrations.CreateModel(
            name="PointSource",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "name",
                    models.CharField(
                        db_index=True, max_length=100, verbose_name="name"
                    ),
                ),
                (
                    "info",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=100,
                        null=True,
                        verbose_name="general information",
                    ),
                ),
                (
                    "infogiver",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="information source",
                    ),
                ),
                (
                    "created",
                    models.DateField(
                        auto_now_add=True, verbose_name="date of creation"
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date of last update"
                    ),
                ),
                (
                    "tags",
                    models.CharField(
                        max_length=100, verbose_name="dictionary of key-value pairs"
                    ),
                ),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.PointField(
                        db_index=True,
                        geography=True,
                        srid=4326,
                        verbose_name="the position of the point-source",
                    ),
                ),
                (
                    "chimney_height",
                    models.FloatField(default=0, verbose_name="chimney height [m]"),
                ),
                (
                    "chimney_outer_diameter",
                    models.FloatField(
                        default=0, verbose_name="chimney outer diameter [m]"
                    ),
                ),
                (
                    "chimney_inner_diameter",
                    models.FloatField(
                        default=0, verbose_name="chimney inner diameter [m]"
                    ),
                ),
                (
                    "chimney_gas_speed",
                    models.FloatField(
                        default=0, verbose_name="chimney gas speed [m/s]"
                    ),
                ),
                (
                    "chimney_gas_temperature",
                    models.FloatField(
                        default=0, verbose_name="chimney gas temperature [deg C]"
                    ),
                ),
                (
                    "house_width",
                    models.IntegerField(
                        default=0,
                        verbose_name="house width [m] (to estimate down draft)",
                    ),
                ),
                (
                    "house_height",
                    models.IntegerField(
                        default=0,
                        verbose_name="house height [m] (to estimate down draft)",
                    ),
                ),
            ],
            options={
                "db_table": "pointsource",
                "default_related_name": "pointsources",
            },
        ),
        migrations.CreateModel(
            name="RoadClass",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                (
                    "properties",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        verbose_name="Road class property dictionary",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Road classes",
                "db_table": "roadclass",
            },
        ),
        migrations.CreateModel(
            name="RoadClassAttribute",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        verbose_name="Road class attribute verbose name",
                    ),
                ),
                (
                    "label",
                    models.SlugField(
                        max_length=100, verbose_name="Road class attribute label"
                    ),
                ),
                (
                    "order",
                    models.IntegerField(verbose_name="Roadclass attribute ordering"),
                ),
            ],
            options={
                "db_table": "roadclass_attribute",
            },
        ),
        migrations.CreateModel(
            name="RoadTimevar",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        verbose_name="name of time variation profile",
                    ),
                ),
                (
                    "typeday",
                    models.CharField(
                        max_length=1000,
                        verbose_name="A table of hourly variation within a typical week",  # noqa
                    ),
                ),
                (
                    "month",
                    models.CharField(
                        default=etk.edb.models.default_timevar_month,
                        max_length=100,
                        verbose_name="A table of monthly variations",
                    ),
                ),
            ],
            options={
                "db_table": "roadtimevar",
            },
        ),
        migrations.CreateModel(
            name="SourceTimevar",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        verbose_name="name of time variation profile",
                    ),
                ),
                (
                    "typeday",
                    models.CharField(
                        max_length=1000,
                        verbose_name="A table of hourly variation within a typical week",  # noqa
                    ),
                ),
                (
                    "month",
                    models.CharField(
                        default=etk.edb.models.default_timevar_month,
                        max_length=100,
                        verbose_name="A table of monthly variations",
                    ),
                ),
            ],
            options={
                "db_table": "sourcetimevar",
            },
        ),
        migrations.CreateModel(
            name="Substance",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=64, unique=True, verbose_name="name"),
                ),
                (
                    "slug",
                    models.SlugField(max_length=64, unique=True, verbose_name="slug"),
                ),
                (
                    "long_name",
                    models.CharField(max_length=64, verbose_name="Descriptive name"),
                ),
            ],
            options={
                "db_table": "substance",
                "default_related_name": "substances",
            },
        ),
        migrations.CreateModel(
            name="Vehicle",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("info", models.CharField(blank=True, max_length=100, null=True)),
                ("isheavy", models.BooleanField(default=False)),
                (
                    "max_speed",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (20, "20"),
                            (30, "30"),
                            (40, "40"),
                            (50, "50"),
                            (60, "60"),
                            (70, "70"),
                            (80, "80"),
                            (90, "90"),
                            (100, "100"),
                            (110, "110"),
                            (120, "120"),
                            (130, "130"),
                            (140, "140"),
                        ],
                        default=130,
                        null=True,
                    ),
                ),
                (
                    "activitycode1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode1",
                    ),
                ),
                (
                    "activitycode2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode2",
                    ),
                ),
                (
                    "activitycode3",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode3",
                    ),
                ),
            ],
            options={
                "db_table": "vehicle",
            },
        ),
        migrations.CreateModel(
            name="RoadSource",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "name",
                    models.CharField(
                        db_index=True, max_length=100, verbose_name="name"
                    ),
                ),
                (
                    "info",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=100,
                        null=True,
                        verbose_name="general information",
                    ),
                ),
                (
                    "infogiver",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="information source",
                    ),
                ),
                (
                    "created",
                    models.DateField(
                        auto_now_add=True, verbose_name="date of creation"
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date of last update"
                    ),
                ),
                (
                    "tags",
                    models.CharField(
                        max_length=100, verbose_name="dictionary of key-value pairs"
                    ),
                ),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.LineStringField(
                        db_index=True,
                        geography=True,
                        srid=4326,
                        verbose_name="the road coordinates",
                    ),
                ),
                (
                    "flow",
                    models.IntegerField(
                        default=0, verbose_name="Annual average day traffic"
                    ),
                ),
                (
                    "nolanes",
                    models.IntegerField(default=2, verbose_name="Number of lanes"),
                ),
                (
                    "speed",
                    models.IntegerField(
                        choices=[
                            (20, "20"),
                            (30, "30"),
                            (40, "40"),
                            (50, "50"),
                            (60, "60"),
                            (70, "70"),
                            (80, "80"),
                            (90, "90"),
                            (100, "100"),
                            (110, "110"),
                            (120, "120"),
                            (130, "130"),
                            (140, "140"),
                        ],
                        default=70,
                        verbose_name="Road sign speed [km/h]",
                    ),
                ),
                (
                    "width",
                    models.FloatField(default=20.0, verbose_name="Road width [meters]"),
                ),
                (
                    "slope",
                    models.IntegerField(
                        choices=[
                            (-10, "-10"),
                            (-9, "-9"),
                            (-8, "-8"),
                            (-7, "-7"),
                            (-6, "-6"),
                            (-5, "-5"),
                            (-4, "-4"),
                            (-3, "-3"),
                            (-2, "-2"),
                            (-1, "-1"),
                            (0, "0"),
                            (1, "1"),
                            (2, "2"),
                            (3, "3"),
                            (4, "4"),
                            (5, "5"),
                            (6, "6"),
                            (7, "7"),
                            (8, "8"),
                            (9, "9"),
                        ],
                        default=0,
                        verbose_name="Slope [%]",
                    ),
                ),
                ("heavy_vehicle_share", models.FloatField(blank=True, null=True)),
                (
                    "congestion_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.congestionprofile",
                    ),
                ),
                (
                    "fleet",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.fleet",
                    ),
                ),
                (
                    "roadclass",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.roadclass",
                    ),
                ),
            ],
            options={
                "db_table": "roadsource",
                "default_related_name": "roads",
            },
        ),
        migrations.CreateModel(
            name="PointSourceSubstance",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                ("value", models.FloatField(default=0, verbose_name="source emission")),
                (
                    "activitycode1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode1",
                    ),
                ),
                (
                    "activitycode2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode2",
                    ),
                ),
                (
                    "activitycode3",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode3",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substances",
                        to="edb.pointsource",
                    ),
                ),
                (
                    "substance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="edb.substance",
                    ),
                ),
                (
                    "timevar",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.sourcetimevar",
                    ),
                ),
            ],
            options={
                "db_table": "pointsource_substance",
            },
        ),
        migrations.CreateModel(
            name="PointSourceActivity",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                ("rate", models.FloatField(verbose_name="activity rate")),
                (
                    "activity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activity",
                    ),
                ),
                (
                    "activitycode1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode1",
                    ),
                ),
                (
                    "activitycode2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode2",
                    ),
                ),
                (
                    "activitycode3",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode3",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to="edb.pointsource",
                    ),
                ),
                (
                    "timevar",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.sourcetimevar",
                    ),
                ),
            ],
            options={
                "db_table": "pointsource_activity",
            },
        ),
        migrations.CreateModel(
            name="GridSourceSubstance",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                ("value", models.FloatField(default=0, verbose_name="source emission")),
                (
                    "band",
                    models.IntegerField(default=0, verbose_name="raster band index"),
                ),
                (
                    "activitycode1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode1",
                    ),
                ),
                (
                    "activitycode2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode2",
                    ),
                ),
                (
                    "activitycode3",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode3",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substances",
                        to="edb.gridsource",
                    ),
                ),
                (
                    "substance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="edb.substance",
                    ),
                ),
                (
                    "timevar",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.sourcetimevar",
                    ),
                ),
            ],
            options={
                "db_table": "gridsource_substance",
            },
        ),
        migrations.CreateModel(
            name="GridSourceActivity",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                ("rate", models.FloatField(verbose_name="activity rate")),
                (
                    "band",
                    models.IntegerField(default=0, verbose_name="raster band index"),
                ),
                (
                    "activity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activity",
                    ),
                ),
                (
                    "activitycode1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode1",
                    ),
                ),
                (
                    "activitycode2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode2",
                    ),
                ),
                (
                    "activitycode3",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode3",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to="edb.gridsource",
                    ),
                ),
                (
                    "timevar",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.sourcetimevar",
                    ),
                ),
            ],
            options={
                "db_table": "gridsource_activity",
            },
        ),
        migrations.CreateModel(
            name="FleetMemberFuel",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                ("fraction", models.FloatField(default=0.0)),
                (
                    "fleet_member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fuels",
                        to="edb.fleetmember",
                    ),
                ),
                (
                    "fuel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="edb.fuel",
                    ),
                ),
            ],
            options={
                "db_table": "fleet_member_fuel",
            },
        ),
        migrations.AddField(
            model_name="fleetmember",
            name="coldstart_timevar",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="edb.roadtimevar",
            ),
        ),
        migrations.AddField(
            model_name="fleetmember",
            name="fleet",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="vehicles",
                to="edb.fleet",
            ),
        ),
        migrations.AddField(
            model_name="fleetmember",
            name="timevar",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="edb.roadtimevar",
            ),
        ),
        migrations.AddField(
            model_name="fleetmember",
            name="vehicle",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="edb.vehicle",
            ),
        ),
        migrations.CreateModel(
            name="AreaSourceSubstance",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                ("value", models.FloatField(default=0, verbose_name="source emission")),
                (
                    "activitycode1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode1",
                    ),
                ),
                (
                    "activitycode2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode2",
                    ),
                ),
                (
                    "activitycode3",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode3",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substances",
                        to="edb.areasource",
                    ),
                ),
                (
                    "substance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="edb.substance",
                    ),
                ),
                (
                    "timevar",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.sourcetimevar",
                    ),
                ),
            ],
            options={
                "db_table": "areasource_substance",
            },
        ),
        migrations.CreateModel(
            name="AreaSourceActivity",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                ("rate", models.FloatField(verbose_name="activity rate")),
                (
                    "activity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activity",
                    ),
                ),
                (
                    "activitycode1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode1",
                    ),
                ),
                (
                    "activitycode2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode2",
                    ),
                ),
                (
                    "activitycode3",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.activitycode3",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to="edb.areasource",
                    ),
                ),
                (
                    "timevar",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="edb.sourcetimevar",
                    ),
                ),
            ],
            options={
                "db_table": "areasource_activity",
            },
        ),
        migrations.CreateModel(
            name="VehicleEF",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                ("freeflow", models.FloatField(default=0)),
                ("saturated", models.FloatField(default=0)),
                ("congested", models.FloatField(default=0)),
                ("stopngo", models.FloatField(default=0)),
                ("coldstart", models.FloatField(default=0)),
                (
                    "fuel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="edb.fuel",
                    ),
                ),
                (
                    "roadclass",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="emissionfactors",
                        to="edb.roadclass",
                    ),
                ),
                (
                    "substance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="edb.substance",
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="emissionfactors",
                        to="edb.vehicle",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Vehicle emission factors",
                "db_table": "vehicle_ef",
                "unique_together": {("substance", "vehicle", "roadclass", "fuel")},
            },
        ),
        migrations.CreateModel(
            name="RoadClassAttributeValue",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                (
                    "value",
                    models.CharField(max_length=60, verbose_name="Attribute value"),
                ),
                (
                    "roadclass_attribute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="values",
                        to="edb.roadclassattribute",
                    ),
                ),
            ],
            options={
                "db_table": "roadclass_attribute_value",
                "unique_together": {("roadclass_attribute", "value")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="fleetmember",
            unique_together={("fleet", "vehicle")},
        ),
        migrations.CreateModel(
            name="EmissionFactor",
            fields=[
                (
                    "locid",
                    models.AutoField(
                        auto_created=True,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("id", models.IntegerField(blank=True, editable=False, null=True)),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date and time of action"
                    ),
                ),
                ("factor", models.FloatField(default=0)),
                (
                    "activity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="emissionfactors",
                        to="edb.activity",
                    ),
                ),
                (
                    "substance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="edb.substance",
                    ),
                ),
            ],
            options={
                "db_table": "emissionfactor",
                "default_related_name": "substances",
                "unique_together": {("activity", "substance")},
            },
        ),
    ]
